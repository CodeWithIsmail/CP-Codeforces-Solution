{"name":"Wear Mask","group":"HackerRank - SRBD Code Contest - 2022 (Round 1)","url":"https://www.hackerrank.com/contests/srbd-code-contest-2022-round-1/challenges/wear-mask","interactive":false,"memoryLimit":512,"timeLimit":4000,"tests":[{"input":"3\n6 6\n3 3\n9 13\n","output":"4\n1\n15\n","id":1727324116897},{"id":1727324297810,"input":"1\n2 2","output":""},{"id":1727325466718,"input":"#include<bits/stdc++.h>\nusing namespace std;\nvector<int> par, dsu_2ecc, dsu_cc;\nint bridges;\nint lca_iteration;\nvector<int> last_visit;\n\nvoid init(int n) {\n    par.resize(n);\n    dsu_2ecc.resize(n);\n    dsu_cc.resize(n);\n    lca_iteration = 0;\n    last_visit.assign(n, 0);\n    for (int i=1; i<=n; ++i) {\n        dsu_2ecc[i] = i;\n        dsu_cc[i] = i;\n        par[i] = -1;\n    }\n    bridges = 0;\n}\n\nint find_2ecc(int v) {\n    if (v == -1)\n        return -1;\n    return dsu_2ecc[v] == v ? v : dsu_2ecc[v] = find_2ecc(dsu_2ecc[v]);\n}\n\nint find_cc(int v) {\n    v = find_2ecc(v);\n    return dsu_cc[v] == v ? v : dsu_cc[v] = find_cc(dsu_cc[v]);\n}\n\nvoid make_root(int v) {\n    v = find_2ecc(v);\n    int root = v;\n    int child = -1;\n    while (v != -1) {\n        int p = find_2ecc(par[v]);\n        par[v] = child;\n        dsu_cc[v] = root;\n        child = v;\n        v = p;\n    }\n}\n\nvoid merge_path (int a, int b) {\n    ++lca_iteration;\n    vector<int> path_a, path_b;\n    int lca = -1;\n    while (lca == -1) {\n        if (a != -1) {\n            a = find_2ecc(a);\n            path_a.push_back(a);\n            if (last_visit[a] == lca_iteration){\n                lca = a;\n                break;\n                }\n            last_visit[a] = lca_iteration;\n            a = par[a];\n        }\n        if (b != -1) {\n            b = find_2ecc(b);\n            path_b.push_back(b);\n            if (last_visit[b] == lca_iteration){\n                lca = b;\n                break;\n                }\n            last_visit[b] = lca_iteration;\n            b = par[b];\n        }\n\n    }\n\n    for (int v : path_a) {\n        dsu_2ecc[v] = lca;\n        if (v == lca)\n            break;\n        --bridges;\n    }\n    for (int v : path_b) {\n        dsu_2ecc[v] = lca;\n        if (v == lca)\n            break;\n        --bridges;\n    }\n}\n\nvoid add_edge(int a, int b) {\n    a = find_2ecc(a);\n    b = find_2ecc(b);\n    if (a == b)\n        return;\n\n    int ca = find_cc(a);\n    int cb = find_cc(b);\n\n    if (ca != cb) {\n        ++bridges;\n        make_root(a);\n        par[a] = dsu_cc[a] = b;\n    } else {\n        merge_path(a, b);\n    }\n}\nint main()\n{\n    int tt , kk =1;\n    cin >> tt;\n    assert(tt>=1 && tt<=100);\n    while(tt--) {\n        int n,m;\n        cin >> n >> m;\n        assert(n>=1 && n<=1000000);\n        assert(m>=1 && m<=2000000);\n        init(n+1);\n        bridges = 0;\n        printf(\"Case %d:\\n\",kk++);\n        while(m--) {\n            int u,v;\n            cin >> u >> v;\n            assert(u != v);\n            assert(u>= 1 && u<=n);\n            assert(v>= 1 && v<=n);\n            add_edge(u,v);\n            cout << bridges << endl;\n        }\n    }\n}\n","output":""}],"testType":"single","input":{"type":"stdin"},"output":{"type":"stdout"},"languages":{"java":{"mainClass":"Main","taskClass":"WearMask"}},"batch":{"id":"195c34d7-839c-4d3e-b58c-dc5f5f6406d0","size":1},"srcPath":"e:\\Competitive-Programming\\SRBD\\Wear_Mask.cpp"}